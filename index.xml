<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dangling Pointers</title>
    <link>http://danglingpointers.com/</link>
    <description>Recent content on Dangling Pointers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Mar 2018 13:59:49 +0200</lastBuildDate>
    
	<atom:link href="http://danglingpointers.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Meltdown and Spectre explained, again</title>
      <link>http://danglingpointers.com/post/meltdown-spectre/</link>
      <pubDate>Sun, 25 Mar 2018 13:59:49 +0200</pubDate>
      
      <guid>http://danglingpointers.com/post/meltdown-spectre/</guid>
      <description>&lt;p&gt;You may have heard of &lt;strong&gt;Meltdown&lt;/strong&gt; and &lt;strong&gt;Spectre&lt;/strong&gt;. In January, these two new &lt;strong&gt;security vulnerabilities&lt;/strong&gt; were made public, and it was kind of a big deal: all modern processors were more or less vulnerable, all systems affected, they could steal your passwords and everything.&lt;/p&gt;

&lt;p&gt;Things have settled down a little bit since then; security patches have been released and no actual attacks have been reported. But still, discoveries of that scale are not common, so I was curious: How do these vulnerabilities work?&lt;/p&gt;

&lt;p&gt;The explanations I could find on the Internet came in two flavors:
the one for security experts (&lt;a href=&#34;https://googleprojectzero.blogspot.fr/2018/01/reading-privileged-memory-with-side.html&#34;&gt;extremely technical, very hard to follow&lt;/a&gt;) and the ones for scared customers (&lt;a href=&#34;https://www.youtube.com/watch?v=syAdX44pokE&#34;&gt;that will make you doubt everything you known about computers&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;So I decided to write my own: for people that have some knowledge about CPUs, but no interest in actually exploiting the vulnerabilities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/spectre.png&#34; alt=&#34;Spectre&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spin Lock Implementation</title>
      <link>http://danglingpointers.com/post/spinlock-implementation/</link>
      <pubDate>Sun, 31 Dec 2017 13:03:00 +0100</pubDate>
      
      <guid>http://danglingpointers.com/post/spinlock-implementation/</guid>
      <description>&lt;p&gt;I attended a &lt;a href=&#34;https://www.game-connection.com/masterclasses/&#34;&gt;Game Connection master class&lt;/a&gt; this year again. This time it was with &lt;a href=&#34;http://www.gameenginebook.com/bio.html&#34;&gt;Jason Gregory&lt;/a&gt; (Lead Programmer at &lt;a href=&#34;https://www.naughtydog.com/&#34;&gt;Naughty Dog&lt;/a&gt;) on concurrent programming, and it was very interesting.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t give a full account because we saw &lt;em&gt;way&lt;/em&gt; too many things (500 slides!).&lt;/p&gt;

&lt;p&gt;Instead, I&amp;rsquo;ll just write about a few &lt;a href=&#34;https://en.wikipedia.org/wiki/Spinlock&#34;&gt;spin lock&lt;/a&gt; implementation tricks that he showed us.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Job System</title>
      <link>http://danglingpointers.com/post/job-system/</link>
      <pubDate>Sun, 27 Aug 2017 11:14:19 +0200</pubDate>
      
      <guid>http://danglingpointers.com/post/job-system/</guid>
      <description>&lt;p&gt;We have a fiber based job system at Pastagames. I started coding it just after seeing this &lt;a href=&#34;http://www.gdcvault.com/play/1022186/Parallelizing-the-Naughty-Dog-Engine&#34;&gt;Naughty Dog GDC Talk&lt;/a&gt; back in 2015. And so far, we&amp;rsquo;re really happy with it.&lt;/p&gt;

&lt;p&gt;In this article, I&amp;rsquo;ll focus more on how we use it than on how we implemented it ‒ our implementation is very close to what Christian Gyrling presented in his talk.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t seen the GDC Talk yet, you should watch it first. It&amp;rsquo;s very interesting and it&amp;rsquo;s probably necessary to follow what I&amp;rsquo;m talking about.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>String Hashes</title>
      <link>http://danglingpointers.com/post/string-hashes/</link>
      <pubDate>Sat, 06 May 2017 12:03:27 +0200</pubDate>
      
      <guid>http://danglingpointers.com/post/string-hashes/</guid>
      <description>&lt;p&gt;Strings are often used as &lt;strong&gt;identifiers&lt;/strong&gt; in games: object names, sound effect names, particle type names, etc. They&amp;rsquo;re a bit like enums with the advantage of allowing your game to be data-driven: you don&amp;rsquo;t necessarily need to recompile your program to accept new values.&lt;/p&gt;

&lt;p&gt;But strings are no fun: storing them efficiently is a headache, they&amp;rsquo;re bigger and they&amp;rsquo;re slower than enums.&lt;/p&gt;

&lt;p&gt;Fortunately there&amp;rsquo;s an alternative: &lt;strong&gt;string hashes&lt;/strong&gt;. We like them a lot at &lt;a href=&#34;http://www.pastagames.com/&#34;&gt;Pastagames&lt;/a&gt;, and here are our humble solutions to the practical problems that come with them.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mike Acton&#39;s Data-Oriented Design Workshop (2015)</title>
      <link>http://danglingpointers.com/post/mike-actons-dod-workshop-2015/</link>
      <pubDate>Sat, 19 Mar 2016 12:04:48 +0100</pubDate>
      
      <guid>http://danglingpointers.com/post/mike-actons-dod-workshop-2015/</guid>
      <description>&lt;p&gt;I attended Mike Acton&amp;rsquo;s master class during last year&amp;rsquo;s &lt;a href=&#34;http://www.game-connection.com/master-classes-0&#34;&gt;Game Connection&lt;/a&gt; in Paris.
Unsurprisingly it was about data-oriented design, but it was a workshop, a practical exercise, and it showed us (or at least me)
a new facet of the concept, as well as a few interesting techniques.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Other blogs and links</title>
      <link>http://danglingpointers.com/post/links/</link>
      <pubDate>Thu, 24 Dec 2015 18:00:19 +0200</pubDate>
      
      <guid>http://danglingpointers.com/post/links/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;images/would-you-like-to-knwo-more.jpg&#34; alt=&#34;Would you like to know more?&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Don’t use std::list</title>
      <link>http://danglingpointers.com/post/dont-use-std-list/</link>
      <pubDate>Thu, 24 Dec 2015 17:00:19 +0200</pubDate>
      
      <guid>http://danglingpointers.com/post/dont-use-std-list/</guid>
      <description>&lt;p&gt;I feel like I’ve been saying this a lot lately ‒ at least once per intern we take at Pastagames ‒ so I guess it&amp;rsquo;s time I write it down.
There&amp;rsquo;s nothing new here, this has been said a hundred times over on the Internet,
but since a lot of people are still not aware of it, here is my contribution.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://danglingpointers.com/about/</link>
      <pubDate>Thu, 24 Dec 2015 15:18:05 +0200</pubDate>
      
      <guid>http://danglingpointers.com/about/</guid>
      <description>&lt;p&gt;Hello and welcome!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Engine on Dangling Pointers</title>
    <link>https://danglingpointers.com/tags/engine/</link>
    <description>Recent content in Engine on Dangling Pointers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Dec 2024 10:03:00 +0200</lastBuildDate>
    
	<atom:link href="https://danglingpointers.com/tags/engine/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The allocators of Bedrock, my own C&#43;&#43; STL alternative</title>
      <link>https://danglingpointers.com/post/bedrock-allocators/</link>
      <pubDate>Mon, 30 Dec 2024 10:03:00 +0200</pubDate>
      
      <guid>https://danglingpointers.com/post/bedrock-allocators/</guid>
      <description>&lt;p&gt;For some reason, I started making my own &lt;strong&gt;STL replacement library&lt;/strong&gt; about 2 months ago. It&amp;rsquo;s called &lt;strong&gt;Bedrock&lt;/strong&gt;. It&amp;rsquo;s &lt;a href=&#34;https://github.com/jlaumon/Bedrock&#34;&gt;available on github&lt;/a&gt; under a copyleft license.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t expect it to become very useful to anyone, but making it has been a lot of fun, so I thought I&amp;rsquo;d share some of the experience.&lt;/p&gt;

&lt;p&gt;Today we&amp;rsquo;re talking &lt;strong&gt;allocators&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/Microsoft-Fluentui-Emoji-Flat-Rock-Flat.256.png&#34; alt=&#34;Bedrock&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Job System #2</title>
      <link>https://danglingpointers.com/post/job-system-2/</link>
      <pubDate>Sat, 20 Oct 2018 11:10:00 +0200</pubDate>
      
      <guid>https://danglingpointers.com/post/job-system-2/</guid>
      <description>&lt;p&gt;Oops! I actually wrote this article one year ago but never finished it. Let&amp;rsquo;s say it&amp;rsquo;s finished, and boom! released.&lt;/p&gt;

&lt;p&gt;This is a follow up on the previous article about &lt;a href=&#34;post/job-system/&#34;&gt;our fiber-based job system&lt;/a&gt;. It contains a few details about our implementation, what we found to be important or not.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spin Lock Implementation</title>
      <link>https://danglingpointers.com/post/spinlock-implementation/</link>
      <pubDate>Sun, 31 Dec 2017 13:03:00 +0100</pubDate>
      
      <guid>https://danglingpointers.com/post/spinlock-implementation/</guid>
      <description>&lt;p&gt;I attended a &lt;a href=&#34;https://www.game-connection.com/masterclasses/&#34;&gt;Game Connection master class&lt;/a&gt; this year again. This time it was with &lt;a href=&#34;http://www.gameenginebook.com/bio.html&#34;&gt;Jason Gregory&lt;/a&gt; (Lead Programmer at &lt;a href=&#34;https://www.naughtydog.com/&#34;&gt;Naughty Dog&lt;/a&gt;) on concurrent programming, and it was very interesting.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t give a full account because we saw &lt;em&gt;way&lt;/em&gt; too many things (500 slides!).&lt;/p&gt;

&lt;p&gt;Instead, I&amp;rsquo;ll just write about a few &lt;a href=&#34;https://en.wikipedia.org/wiki/Spinlock&#34;&gt;spin lock&lt;/a&gt; implementation tricks that he showed us.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Job System</title>
      <link>https://danglingpointers.com/post/job-system/</link>
      <pubDate>Sun, 27 Aug 2017 11:14:19 +0200</pubDate>
      
      <guid>https://danglingpointers.com/post/job-system/</guid>
      <description>&lt;p&gt;We have a fiber based job system at Pastagames. I started coding it just after seeing this &lt;a href=&#34;http://www.gdcvault.com/play/1022186/Parallelizing-the-Naughty-Dog-Engine&#34;&gt;Naughty Dog GDC Talk&lt;/a&gt; back in 2015. And so far, we&amp;rsquo;re really happy with it.&lt;/p&gt;

&lt;p&gt;In this article, I&amp;rsquo;ll focus more on how we use it than on how we implemented it â€’ our implementation is very close to what Christian Gyrling presented in his talk.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t seen the GDC Talk yet, you should watch it first. It&amp;rsquo;s very interesting and it&amp;rsquo;s probably necessary to follow what I&amp;rsquo;m talking about.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>String Hashes</title>
      <link>https://danglingpointers.com/post/string-hashes/</link>
      <pubDate>Sat, 06 May 2017 12:03:27 +0200</pubDate>
      
      <guid>https://danglingpointers.com/post/string-hashes/</guid>
      <description>&lt;p&gt;Strings are often used as &lt;strong&gt;identifiers&lt;/strong&gt; in games: object names, sound effect names, particle type names, etc. They&amp;rsquo;re a bit like enums with the advantage of allowing your game to be data-driven: you don&amp;rsquo;t necessarily need to recompile your program to accept new values.&lt;/p&gt;

&lt;p&gt;But strings are no fun: storing them efficiently is a headache, they&amp;rsquo;re bigger and they&amp;rsquo;re slower than enums.&lt;/p&gt;

&lt;p&gt;Fortunately there&amp;rsquo;s an alternative: &lt;strong&gt;string hashes&lt;/strong&gt;. We like them a lot at &lt;a href=&#34;http://www.pastagames.com/&#34;&gt;Pastagames&lt;/a&gt;, and here are our humble solutions to the practical problems that come with them.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>